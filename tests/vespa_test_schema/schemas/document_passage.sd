schema document_passage {

    document document_passage {

        field search_weights_ref type reference<search_weights> {
            indexing: attribute | summary
        }

        field family_document_ref type reference<family_document> {
            indexing: attribute | summary
        }

        field text_block_id type string {
            indexing: attribute | summary
        }

        field text_block_coords type array<array<float>> {
            indexing: summary
        }

        field text_block_page type int {
            indexing: attribute | summary
        }

        field text_block_type type string {
            indexing: attribute | summary
        }

        field text_block type string {
            indexing: attribute | index | summary
            index: enable-bm25
        }

        field text_embedding type tensor<float>(x[768]) {
            indexing: index | attribute
            alias: search_text_embedding
            attribute {
                distance-metric: innerproduct
            }
            index {
                hnsw {
                    max-links-per-node: 16
                    neighbors-to-explore-at-insert: 500
                }
            }
        }
    }

    import field family_document_ref.family_name as family_name {}
    import field family_document_ref.family_description as family_description {}
    import field family_document_ref.family_import_id as family_import_id {}
    import field family_document_ref.family_slug as family_slug {}
    import field family_document_ref.family_category as family_category {}
    import field family_document_ref.family_publication_ts as family_publication_ts {}
    import field family_document_ref.family_publication_year as family_publication_year {}
    import field family_document_ref.family_geography as family_geography {}
    import field family_document_ref.family_source as family_source {}
    import field family_document_ref.document_import_id as document_import_id {}
    import field family_document_ref.document_slug as document_slug {}
    import field family_document_ref.document_languages as document_languages {}
    import field family_document_ref.document_content_type as document_content_type {}
    import field family_document_ref.document_cdn_object as document_cdn_object {}
    import field family_document_ref.document_source_url as document_source_url {}
    import field search_weights_ref.passage_weight as passage_weight {}

    fieldset default {
        fields: text_block, text_embedding
    }

    document-summary search_summary {
        summary family_name {}
        summary family_description {}
        summary family_import_id {}
        summary family_slug {}
        summary family_category {}
        summary family_publication_ts {}
        summary family_geography {}
        summary family_source {}
        summary document_import_id {}
        summary document_slug {}
        summary document_languages {}
        summary document_content_type {}
        summary document_cdn_object {}
        summary document_source_url {}
        summary text_block {}
        summary text_block_id {}
        summary text_block_type {}
        summary text_block_page {}
        summary text_block_coords {}
    }

    rank-profile exact inherits default {
        function text_score() {
            expression: attribute(passage_weight) * fieldMatch(text_block)
        }
        first-phase {
            expression: text_score()
        }
        match-features: text_score()
    }

    rank-profile hybrid_no_closeness inherits default {
        function text_score() {
            expression: attribute(passage_weight) * bm25(text_block)
        }
        first-phase {
            expression: text_score()
        }
        match-features: text_score()
    }

    rank-profile hybrid inherits default {
        inputs {
            query(query_embedding) tensor<float>(x[768])
        }
        function text_score() {
            expression: attribute(passage_weight) * (bm25(text_block) + closeness(text_embedding))
        }
        first-phase {
            expression: text_score()
        }
        match-features: text_score()
    }
}
